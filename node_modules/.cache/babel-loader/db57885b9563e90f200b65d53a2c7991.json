{"ast":null,"code":"var _jsxFileName = \"/Users/maiduong/Downloads/app/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport * as dataWeek from \"./data7d.json\";\nimport { format, isSameDay, fromUnixTime, isWeekend, isThisWeek } from \"date-fns\";\nconst advice = {\n  \"10d\": \"Better take an umbrella with you!\",\n  \"01d\": \"Clear sky, clear mind.\",\n  \"03d\": \"A gray day provides the best light.\"\n};\n\nconst parseDay = day => {\n  return [{\n    date: fromUnixTime(day.dt),\n    temperature: arrAvg(Object.values(day.temp)) || day.temp,\n    description: day.weather[0].description,\n    icon: day.weather[0].icon\n  }];\n};\n\nconst arrAvg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n\nconst parseWeekend = raw => {\n  const parsed = raw.daily.flatMap(day => parseDay(day));\n  return parsed.filter(day => isWeekend(day.date) && isThisWeek(day.date, {\n    weekStartsOn: 1\n  }));\n};\n\nfunction WeatherDisplay({\n  date,\n  description,\n  temperature,\n  icon\n}) {\n  const day = isSameDay(new Date(), date) ? \"Today\" : format(date, \"EEEE\");\n  const iconURL = `http://openweathermap.org/img/wn/${icon}@4x.png`;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"WeatherDisplay\",\n    key: day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, day), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, format(date, \"PP\"))), /*#__PURE__*/React.createElement(\"img\", {\n    src: iconURL,\n    alt: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, description), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, Math.round(temperature), \" \\xBAC\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, advice[icon]));\n}\n\nfunction App() {\n  const [displayChoice, setDisplayChoice] = React.useState(\"today\");\n  const todayData = parseDay(dataWeek.default.current);\n  const weekendData = parseWeekend(dataWeek.default);\n  const data = displayChoice === \"today\" ? todayData : weekendData;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"Card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, data.map(day => /*#__PURE__*/React.createElement(WeatherDisplay, Object.assign({}, day, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    name: \"dateButton\",\n    onClick: () => setDisplayChoice(\"today\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    name: \"dateButton\",\n    onClick: () => setDisplayChoice(\"weekend\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Weekend\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/maiduong/Downloads/app/src/App.js"],"names":["React","dataWeek","format","isSameDay","fromUnixTime","isWeekend","isThisWeek","advice","parseDay","day","date","dt","temperature","arrAvg","Object","values","temp","description","weather","icon","arr","reduce","a","b","length","parseWeekend","raw","parsed","daily","flatMap","filter","weekStartsOn","WeatherDisplay","Date","iconURL","Math","round","App","displayChoice","setDisplayChoice","useState","todayData","default","current","weekendData","data","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport * as dataWeek from \"./data7d.json\";\nimport {\n  format,\n  isSameDay,\n  fromUnixTime,\n  isWeekend,\n  isThisWeek,\n} from \"date-fns\";\n\nconst advice = {\n  \"10d\": \"Better take an umbrella with you!\",\n  \"01d\": \"Clear sky, clear mind.\",\n  \"03d\": \"A gray day provides the best light.\",\n};\n\nconst parseDay = (day) => {\n  return [\n    {\n      date: fromUnixTime(day.dt),\n      temperature: arrAvg(Object.values(day.temp)) || day.temp,\n      description: day.weather[0].description,\n      icon: day.weather[0].icon,\n    },\n  ];\n};\n\nconst arrAvg = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\n\nconst parseWeekend = (raw) => {\n  const parsed = raw.daily.flatMap((day) => parseDay(day));\n  return parsed.filter(\n    (day) => isWeekend(day.date) && isThisWeek(day.date, { weekStartsOn: 1 })\n  );\n};\n\nfunction WeatherDisplay({ date, description, temperature, icon }) {\n  const day = isSameDay(new Date(), date) ? \"Today\" : format(date, \"EEEE\");\n  const iconURL = `http://openweathermap.org/img/wn/${icon}@4x.png`;\n  return (\n    <li className=\"WeatherDisplay\" key={day}>\n      <div className=\"Date\">\n        <h3>{day}</h3>\n        <p>{format(date, \"PP\")}</p>\n      </div>\n      <img src={iconURL} alt=\"icon\" />\n      <p>{description}</p>\n      <p id=\"temperature\">{Math.round(temperature)} ÂºC</p>\n      <p>{advice[icon]}</p>\n    </li>\n  );\n}\n\nfunction App() {\n  const [displayChoice, setDisplayChoice] = React.useState(\"today\");\n  const todayData = parseDay(dataWeek.default.current);\n  const weekendData = parseWeekend(dataWeek.default);\n  const data = displayChoice === \"today\" ? todayData : weekendData;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ul className=\"Card\">\n          {data.map((day) => (\n            <WeatherDisplay {...day} />\n          ))}\n        </ul>\n        <div className=\"buttonContainer\">\n          <button name=\"dateButton\" onClick={() => setDisplayChoice(\"today\")}>\n            Today\n          </button>\n          <button name=\"dateButton\" onClick={() => setDisplayChoice(\"weekend\")}>\n            Weekend\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}